import jwt
import pendulum
import os
from dotenv import load_dotenv

load_dotenv()

SECRET_KEY = os.getenv("SECRET_KEY")
ALGORITHM = 'HS256'
TOKEN_FILE = '.jwt_token'


def generate_token(user):
    """
    transform the dictionary payload into a jwt string using the secret key
    according to HS256 algorithm.
    :param user: the user identified by the payload.
    :return: the token
    """
    payload = {
        'user_id': user.id,
        'role': user.role.name,
        'exp': pendulum.now().add(hours=1).int_timestamp
    }
    token = jwt.encode(payload, SECRET_KEY, algorithm=ALGORITHM)
    save_token(token)
    print("Authentification réussie. token généré")
    return token


def verify_token(token: str = None):
    """
    decode the token generated by the generate_token function by using
    the secret key from the SECRET_KEY environment variable and verify it.
    according to HS256 algorithm.
    :return: None
    """

    if not token:
        token = load_token()
    if not token:
        print("Aucun token trouvé, veuillez vous reconnecter")
        return None
    try:
        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])
        print("Token valide")
        return payload
    except jwt.ExpiredSignatureError:
        print("Le Token a expiré, veuillez vous reconnecter")
    except jwt.InvalidTokenError:
        print("Token invalide")
        return None


def save_token(token):
    """
    Save the token in TOKEN_FILE
    :param token: the token generated by generate_token function
    :return: None
    """
    with open(TOKEN_FILE, 'w') as file:
        file.write(token)


def load_token():
    """
    load the token from TOKEN_FILE
    :return: None
    """
    if os.path.exists(TOKEN_FILE):
        with open(TOKEN_FILE, 'r') as file:
            return file.read().strip()
    return None


def delete_token():
    if os.path.exists(TOKEN_FILE):
        os.remove(TOKEN_FILE)
        print("Deconnexion réussie")
    else:
        print("Aucun token à supprimer")
